// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  name             String
  email            String            @unique
  password         String
  mobileNo         String            @unique
  role             Role              @default(TEACHER)
  token            Token?
  student_Details  Student_Details?
  Employee_Details Employee_Details?
}

model Token {
  token         String   @unique
  user          User     @relation(fields: [userId], references: [id])
  userId        Int      @unique
  created_at    DateTime @default(now())
  exp_At        DateTime
  ip            String?
  role          Role
  is_logged_out Boolean  @default(false)
}

model Student_Details {
  student_id        Int    @unique
  class_id          Int
  rollnumber        BigInt @unique
  father_name       String
  mother_name       String
  address           String
  alternate_number  String
  guardian_name     String
  guardian_relation String
  studentRelation   User   @relation(fields: [student_id], references: [id])
  classRelation     Class  @relation(fields: [class_id], references: [id])
}

model Employee_Details {
  employee_id          Int     @unique
  address              String
  alternate_mob_number String
  guardian_name        String
  guardian_relation    String
  uid                  String
  uid_type             String
  employeeRelation     User    @relation(fields: [employee_id], references: [id])
  classRelation        Class[]
}

model Class {
  id                  Int               @id @default(autoincrement())
  name                String
  capacity            Int
  coordinator         Int
  fees_per_month      Decimal
  coordinatorRelation Employee_Details  @relation(fields: [coordinator], references: [employee_id])
  Student_Details     Student_Details[]
}

model Subject {
  subject_id Int    @id @default(autoincrement())
  name       String
  code       String
}

enum Role {
  TEACHER
  ADMIN
  ACCOUNTS
  STUDENT
  ADMISSION
  MANAGEMENT
}
