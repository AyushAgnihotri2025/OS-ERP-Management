// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id          Int               @id @default(autoincrement())
  name             String
  email            String            @unique
  password         String
  mobileNo         String            @unique
  role             Role              @default(TEACHER)
  image_url        String?
  token            Token?
  student_Details  Student_Details?
  Employee_Details Employee_Details?
  Teaches          Teaches[]
}

model Token {
  token         String   @unique
  user          User     @relation(fields: [user_id], references: [user_id])
  user_id       Int      @unique
  created_at    DateTime @default(now())
  exp_At        DateTime
  ip            String?
  role          Role
  is_logged_out Boolean  @default(false)
}

model Student_Details {
  student_id        Int      @unique
  class_id          Int
  first_name        String
  middle_name       String
  last_name         String
  rollnumber        BigInt?  @unique
  father_name       String
  mother_name       String
  alternate_number  String
  date_of_birth     DateTime
  address           String
  city              String
  state             String
  pincode           Int
  country_code      Int
  guardian_name     String
  guardian_relation String
  uid               String   @unique
  uid_type          String
  studentRelation   User     @relation(fields: [student_id], references: [user_id])
  classRelation     Class    @relation(fields: [class_id], references: [class_id])
}

model Employee_Details {
  employee_id          Int     @unique
  address              String
  alternate_mob_number String
  guardian_name        String
  guardian_relation    String
  uid                  String
  uid_type             String
  employeeRelation     User    @relation(fields: [employee_id], references: [user_id])
  classRelation        Class[]
}

model Class {
  class_id            Int               @id @default(autoincrement())
  class_name          String            @unique
  capacity            Int
  coordinator         Int?
  fees_per_month      Decimal
  coordinatorRelation Employee_Details? @relation(fields: [coordinator], references: [employee_id])
  Student_Details     Student_Details[]
}

model Subject {
  subject_id   Int       @id @default(autoincrement())
  subject_name String
  subject_code String
  Teaches      Teaches[]
}

model Teaches {
  teacher_id      Int
  subject_id      Int
  teacherRelation User    @relation(fields: [teacher_id], references: [user_id])
  subjectRelation Subject @relation(fields: [subject_id], references: [subject_id])

  @@id([teacher_id, subject_id])
}

enum Role {
  TEACHER
  ADMIN
  ACCOUNTS
  STUDENT
  ADMISSION
  MANAGEMENT
}
